#include <GL/glut.h>
#include <cmath>

     void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glColor3f(0.0, 0.0, 0.0); // Set drawing color to black
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-400, 400, -400, 400);
}

void drawRectangle(float x, float y, float width, float height, float r, float g, float b) {
    glColor3f(r, g, b);
    glBegin(GL_QUADS);
        glVertex2f(x, y);
        glVertex2f(x + width, y);
        glVertex2f(x + width, y + height);
        glVertex2f(x, y + height);
    glEnd();
}

void drawCircle(float x, float y, float radius, float r, float g, float b) {
    glColor3f(r, g, b);
    glBegin(GL_TRIANGLE_FAN);
        glVertex2f(x, y);
        for (int i = 0; i <= 100; ++i) {
            float angle = 2 * M_PI * i / 100;
            glVertex2f(x + cos(angle) * radius, y + sin(angle) * radius);
        }
    glEnd();
}
void translate(float dx, float dy) {
    glTranslatef(dx, dy, 0.0f);
}
void rotate(float angle) {
    glRotatef(angle, 0.0f, 0.0f, 1.0f);
}
void scale(float sx, float sy) {
    glScalef(sx, sy, 1.0f);
}
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
  glPushMatrix();
    drawRectangle(-200, 0, 100, 50, 0.0f, 0.0f, 1.0f);
    glPopMatrix();

         glPushMatrix();
    translate(200, 0);
    drawRectangle(-200, 0, 100, 50, 0.0f, 1.0f, 0.0f);
    glPopMatrix();

    glPushMatrix();
    translate(0, 0);
    rotate(45);
    drawRectangle(-200, 0, 100, 50, 1.0f, 0.0f, 0.0f);
    glPopMatrix();

    glPushMatrix();
    translate(0, 0);
    scale(2, 2);
    drawRectangle(-200, 0, 100, 50, 0.5f, 0.0f, 0.5f);
    glPopMatrix();

    glPushMatrix();
    drawCircle(100, 100, 50, 1.0f, 0.0f, 0.0f);
    glPopMatrix();

    glPushMatrix();
    translate(200, 0);
    drawCircle(300, 100, 50, 0.0f, 1.0f, 0.0f);
    glPopMatrix();

    glPushMatrix();
    translate(300, 100);
    rotate(45);
    drawCircle(0, 0, 50, 0.0f, 0.0f, 1.0f);
    glPopMatrix();

          glPushMatrix();
    translate(300, 100);
    scale(2, 2);
    drawCircle(0, 0, 50, 0.5f, 0.5f, 0.0f);
    glPopMatrix();
    glFlush();
}
     int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 800);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("2D Geometric Operations with FreeGLUT");
    init();
    glutDisplayFunc(display);
     glutMainLoop();
    return 0;
}









